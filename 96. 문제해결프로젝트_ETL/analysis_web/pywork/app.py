# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PUBDyFdVnth1K-O-e7kly07EeViultrV
"""

# !pip install uvicorn
# !pip install fastapi
# !pip install nest-asyncio pyngrok

"""### 라이브러리 선언"""

import pandas as pd
import numpy as np
# 서버 관리용 fastapi 의존 라이브러리
import uvicorn
# 비동기형 통신 파이썬 라이브러리
from fastapi import FastAPI
# API 연계 데이터 정의
from pydantic import BaseModel
import pickle

from fastapi.middleware.cors import CORSMiddleware
origins = ["*"]

app = FastAPI(title="ML API")

# CORS 미들웨어 추가
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # 모든 origin 허용
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

"""### 1. 모델 불러오기"""

with open ("coreDtModel.pickle","rb") as fr:
    loadedModelData = pickle.load(fr)
loadedModelData
loadedModel = loadedModelData["model"]
features = loadedModelData["feature"]
label = loadedModelData["label"]
preprocessing = loadedModelData["preprocessing"]
ynDict = preprocessing[2]
# inHclus = 1
# inPropercent = 0.4
# inPromotion = "Y"
# inHoliday = "N"
# ynDict = preprocessing[2]
# inPromotion = ynDict[ inPromotion ]
# inHoliday = ynDict[ inHoliday ]
# testDf = pd.DataFrame([[ inHclus, inPropercent, inPromotion, inHoliday]])
# predictValue = loadedModel.predict(testDf)[0]

# predictValue

"""### 2. 인터페이스 데이터 정의"""

class InDataset(BaseModel):
    inHclus : int
    inPropercent : float
    inPromotion : str
    inHoliday : str

"""### 3. 예측용 함수 정의"""

@app.post("/predict", status_code=200)
async def predict_ml( x: InDataset):
    inHclus = x.inHclus
    inPropercent = x.inPropercent
    inPromotion = x.inPromotion
    inHoliday = x.inHoliday
    print(x)
    inPromotion = ynDict[ inPromotion ]
    inHoliday = ynDict[ inHoliday ]
    testDf = pd.DataFrame([[ inHclus, inPropercent, inPromotion, inHoliday]])
    predictValue = loadedModel.predict(testDf)[0]
    return {"prediction": predictValue}

@app.get("/")
async def root():
    return {"message":"server is running"}

import uvicorn
if __name__ == "__main__":
    uvicorn.run("app:app", host="0.0.0.0", port=9999, log_level="debug",
                proxy_headers=True, reload=True)

# import nest_asyncio
# from pyngrok import ngrok
# import uvicorn
# auth_token = "2iAHxwSOdo8avyIlVoLwBmM2IEr_31f5XCvu9LtpNJxkDKn6E"
# ngrok.set_auth_token(auth_token)
# ngrokTunnel = ngrok.connect(9999)
# print("공용 URL", ngrokTunnel.public_url)
# nest_asyncio.apply()
# uvicorn.run(app, port=9999)

